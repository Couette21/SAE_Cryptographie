Présentation de la clé MD5 et du paradoxe des anniversaires

Qu'est-ce que MD5 ?
MD5 (Message Digest Algorithm 5) est un algorithme de hachage cryptographique développé par Ronald Rivest en 1991. Cet algorithme prend un message de n'importe quelle longueur en entrée et produit une chaîne de 128 bits (16 octets) appelée "empreinte" ou "hash". Les caractéristiques principales de MD5 sont :

Unidirectionnalité : Il est pratiquement impossible de retrouver le message d'origine à partir de son empreinte MD5.
Déterminisme : Le même message produira toujours la même empreinte MD5.
Collision faible : Il est difficile de trouver deux messages différents produisant la même empreinte MD5 (bien que des vulnérabilités aient été découvertes).
Le paradoxe des anniversaires
Le paradoxe des anniversaires est un concept probabiliste qui explique pourquoi, dans un groupe de personnes, il est beaucoup plus probable que deux personnes partagent le même anniversaire que l'on pourrait intuitivement le penser. En termes simples, il démontre que dans un groupe de 23 personnes, il y a environ 50 % de chances que deux personnes aient le même anniversaire.

Appliqué aux hachages, ce paradoxe signifie qu'il est beaucoup plus probable de trouver deux messages avec le même hash (collision) que ce que l'on pourrait initialement croire, même avec un grand espace de hachage comme celui de MD5.

Exemple avec un script Python
Voici un script Python qui montre comment générer des empreintes MD5 et illustre le paradoxe des anniversaires en trouvant des collisions.

Plan

Importer les bibliothèques nécessaires.
Générer des empreintes MD5 pour des chaînes aléatoires.
Utiliser un dictionnaire pour détecter les collisions.
Afficher les résultats.
Script Python

python
Copier le code
import hashlib
import random
import string

def generate_random_string(length=10):
    """Génère une chaîne aléatoire de la longueur spécifiée."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

def md5_hash(text):
    """Calcule l'empreinte MD5 de la chaîne spécifiée."""
    return hashlib.md5(text.encode('utf-8')).hexdigest()

def find_collision(num_strings=10000):
    """Cherche des collisions MD5 parmi les chaînes aléatoires générées."""
    hashes = {}
    for _ in range(num_strings):
        random_string = generate_random_string()
        hash_value = md5_hash(random_string)
        if hash_value in hashes:
            return random_string, hashes[hash_value], hash_value
        hashes[hash_value] = random_string
    return None, None, None

if __name__ == "__main__":
    # Nombre de chaînes à générer
    num_strings = 100000

    str1, str2, hash_value = find_collision(num_strings)

    if str1 and str2:
        print(f"Collision trouvée après {num_strings} essais:")
        print(f"Chaîne 1: {str1}")
        print(f"Chaîne 2: {str2}")
        print(f"Empreinte MD5: {hash_value}")
    else:
        print(f"Aucune collision trouvée après {num_strings} essais.")
Explication du script

generate_random_string : Génère une chaîne aléatoire de 10 caractères.
md5_hash : Calcule l'empreinte MD5 de la chaîne donnée.
find_collision : Cherche des collisions MD5 en générant des chaînes aléatoires et en stockant leurs empreintes dans un dictionnaire. Si une collision est trouvée (même empreinte pour deux chaînes différentes), elle retourne les deux chaînes et leur empreinte commune.
Main : Définit le nombre de chaînes à générer et cherche des collisions, puis affiche les résultats.
Suggestions de suivi
a. Ajouter des tests unitaires pour vérifier le bon fonctionnement des fonctions du script.

b. Améliorer le script pour générer des statistiques sur le nombre de collisions trouvées pour différents nombres de chaînes générées.
